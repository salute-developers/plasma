name: Change detection

on:
  workflow_call:
    outputs:
      SCOPE:
        description: "scope collection"
        value: ${{ jobs.run.outputs.SCOPE }}
      HAS_SCOPE:
        description: "has scope"
        value: ${{ jobs.run.outputs.HAS_SCOPE }}
jobs:
  run:
    runs-on: ubuntu-latest
    outputs:
      SCOPE: ${{ steps.set-scope.outputs.SCOPE }}
      HAS_SCOPE: ${{ steps.set-scope.outputs.HAS_SCOPE }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare environment
        uses: ./.github/actions/prepare-environment

      - name: Set scope
        id: set-scope
        shell: bash
        run: |
          # Get changed state   
          lerna_ls=$(npx lerna ls --since=$(git merge-base --fork-point origin/dev))
          
          # Parse lerna ls output and print string like "b2c, web, temple, etc"
          state=$(awk -F '-' '{if ($2 == "b2c" || $2 == "web" || $2=="ui" || $2=="temple") printf "%s%s", sep, $2; sep=","} END {print ""}' <<< $lerna_ls)
          
          # Create scope as array     
          IFS="," read -a scope <<< $state
          
          if [[ ${#scope[@]} -ne 0 ]]; then
            echo "HAS_SCOPE=true" >> "$GITHUB_OUTPUT"
          
            # "--null-input" - Don't read any input at all! Instead, the filter is run once using null as the input. This is useful when using jq as a simple calculator or to construct JSON data from scratch.
            # "--compact-output" - By default, jq pretty-prints JSON output. Using this option will result in more compact output by instead putting each JSON object on a single line.
            # Remaining arguments are positional string arguments. These are available to the jq program as $ARGS.positional[]
            echo "SCOPE=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${scope[@]}")" >> "$GITHUB_OUTPUT"
          else
            echo "HAS_SCOPE=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Console log
        run: |
          echo "HAS_SCOPE ---> ${{ steps.set-scope.outputs.HAS_SCOPE }}"
          echo "SCOPE ---> ${{ steps.set-scope.outputs.SCOPE }}"

