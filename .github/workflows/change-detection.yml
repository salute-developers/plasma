name: Change detection

on:
  workflow_call:
    inputs:
      exclude-dependents:
        description: 'Lerna boostrap filter-option, exclude all transitive dependents when running a command with --since'
        default: false
        type: boolean
      as-enumeration:
        description: 'Get scope as "[plasma-core,plasma-ui]", etc'
        default: false
        type: boolean
      ref:
          type: string
          description: "Manual set repo ref"
          default: ''
    outputs:
      SCOPE:
        description: "scope collection"
        value: ${{ jobs.run.outputs.SCOPE }}
      HAS_SCOPE:
        description: "has scope"
        value: ${{ jobs.run.outputs.HAS_SCOPE }}
      HAS_DOCUMENTATION_CHANGED:
        description: ""
        value: ${{ jobs.run.outputs.HAS_DOCUMENTATION_CHANGED }}
      HAS_PLASMA_UI_DOCS:
        description: ""
        value: ${{ jobs.run.outputs.HAS_PLASMA_UI_DOCS }}
      HAS_PLASMA_WEB_DOCS:
        description: ""
        value: ${{ jobs.run.outputs.HAS_PLASMA_WEB_DOCS }}
      HAS_PLASMA_UI:
        description: ""
        value: ${{ jobs.run.outputs.HAS_PLASMA_UI }}
      HAS_PLASMA_WEB:
        description: ""
        value: ${{ jobs.run.outputs.HAS_PLASMA_WEB }}
      HAS_PLASMA_B2C:
        description: ""
        value: ${{ jobs.run.outputs.HAS_PLASMA_B2C }}
      HAS_PLASMA_HOPE:
        description: ""
        value: ${{ jobs.run.outputs.HAS_PLASMA_HOPE }}
      HAS_PLASMA_ASDK:
        description: ""
        value: ${{ jobs.run.outputs.HAS_PLASMA_ASDK }}
      HAS_CALDERA:
        description: ""
        value: ${{ jobs.run.outputs.HAS_CALDERA }}
      HAS_CALDERA_ONLINE:
        description: ""
        value: ${{ jobs.run.outputs.HAS_CALDERA_ONLINE }}
      HAS_SDDS_SERV:
        description: ""
        value: ${{ jobs.run.outputs.HAS_SDDS_SERV }}
      HAS_ASSETS:
        description: ""
        value: ${{ jobs.run.outputs.HAS_ASSETS }}
      PACKAGES_ENUMERATION:
        description: ""
        value: ${{ jobs.run.outputs.PACKAGES_ENUMERATION }}
jobs:
  run:
    runs-on: ubuntu-latest
    outputs:
      SCOPE: ${{ steps.set-output.outputs.SCOPE }}
      HAS_SCOPE: ${{ steps.set-output.outputs.HAS_SCOPE }}
      HAS_DOCUMENTATION_CHANGED: ${{ steps.set-output.outputs.HAS_DOCUMENTATION_CHANGED }}
      HAS_PLASMA_UI_DOCS: ${{ steps.set-output.outputs.HAS_PLASMA_UI_DOCS }}
      HAS_PLASMA_WEB_DOCS: ${{ steps.set-output.outputs.HAS_PLASMA_WEB_DOCS }}
      HAS_PLASMA_B2C: ${{ steps.set-output.outputs.HAS_PLASMA_B2C }}
      HAS_PLASMA_WEB: ${{ steps.set-output.outputs.HAS_PLASMA_WEB }}
      HAS_PLASMA_UI: ${{ steps.set-output.outputs.HAS_PLASMA_UI }}
      HAS_PLASMA_HOPE: ${{ steps.set-output.outputs.HAS_PLASMA_HOPE }}
      HAS_PLASMA_ASDK: ${{ steps.set-output.outputs.HAS_PLASMA_ASDK }}
      HAS_CALDERA: ${{ steps.set-output.outputs.HAS_CALDERA }}
      HAS_CALDERA_ONLINE: ${{ steps.set-output.outputs.HAS_CALDERA_ONLINE }}
      HAS_SDDS_SERV: ${{ steps.set-output.outputs.HAS_SDDS_SERV }}
      HAS_ASSETS: ${{ steps.set-output.outputs.HAS_ASSETS }}
      PACKAGES_ENUMERATION: ${{ steps.set-output.outputs.PACKAGES_ENUMERATION }}

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: Prepare environment
        uses: ./.github/actions/prepare-environment

      - name: Set exclude-dependents env
        if: ${{ inputs.exclude-dependents }}
        run: echo "EXCLUDE_DEPENDENTS=--exclude-dependents" >> $GITHUB_ENV

      - name: Get lerna ls output
        shell: bash
        id: changed-state
        run: |
          #INFO: `jq -c` => Делаем вывод в одну JSON строку
          echo "CHANGED_STATE=$(npx lerna la --json --since=$(git merge-base --fork-point origin/dev) ${{ env.EXCLUDE_DEPENDENTS }} | jq -c)" >> "$GITHUB_OUTPUT"

      - name: Computed scope state
        id: scope
        uses: actions/github-script@v6
        env:
          CHANGED_STATE: ${{ toJSON(steps.changed-state.outputs.CHANGED_STATE) }}
          AS_ENUMERATION: ${{ inputs.as-enumeration }}
        with:
          script: |
            const processingScope = require('./.github/processing-scope.js');

            return processingScope();

      - name: Set "GITHUB_OUTPUT"
        id: set-output
        run: |
          echo "SCOPE=${{ fromJSON(steps.scope.outputs.result).SCOPE }}" >> $GITHUB_OUTPUT
          echo "HAS_SCOPE=${{ fromJSON(steps.scope.outputs.result).HAS_SCOPE }}" >> $GITHUB_OUTPUT
          echo "HAS_PLASMA_UI_DOCS=${{ fromJSON(steps.scope.outputs.result).HAS_PLASMA_UI_DOCS }}" >> $GITHUB_OUTPUT
          echo "HAS_PLASMA_WEB_DOCS=${{ fromJSON(steps.scope.outputs.result).HAS_PLASMA_WEB_DOCS }}" >> $GITHUB_OUTPUT
          echo "HAS_DOCUMENTATION_CHANGED=${{ fromJSON(steps.scope.outputs.result).HAS_DOCUMENTATION_CHANGED }}" >> $GITHUB_OUTPUT
          echo "HAS_PLASMA_B2C=${{ fromJSON(steps.scope.outputs.result).HAS_PLASMA_B2C }}" >> $GITHUB_OUTPUT
          echo "HAS_PLASMA_WEB=${{ fromJSON(steps.scope.outputs.result).HAS_PLASMA_WEB }}" >> $GITHUB_OUTPUT
          echo "HAS_PLASMA_UI=${{ fromJSON(steps.scope.outputs.result).HAS_PLASMA_UI }}" >> $GITHUB_OUTPUT
          echo "HAS_PLASMA_HOPE=${{ fromJSON(steps.scope.outputs.result).HAS_PLASMA_HOPE }}" >> $GITHUB_OUTPUT
          echo "HAS_PLASMA_ASDK=${{ fromJSON(steps.scope.outputs.result).HAS_PLASMA_ASDK }}" >> $GITHUB_OUTPUT
          echo "HAS_CALDERA=${{ fromJSON(steps.scope.outputs.result).HAS_CALDERA }}" >> $GITHUB_OUTPUT
          echo "HAS_CALDERA_ONLINE=${{ fromJSON(steps.scope.outputs.result).HAS_CALDERA_ONLINE }}" >> $GITHUB_OUTPUT
          echo "HAS_SDDS_SERV=${{ fromJSON(steps.scope.outputs.result).HAS_SDDS_SERV }}" >> $GITHUB_OUTPUT
          echo "HAS_ASSETS=${{ fromJSON(steps.scope.outputs.result).HAS_ASSETS }}" >> $GITHUB_OUTPUT
          echo "PACKAGES_ENUMERATION=${{ fromJSON(steps.scope.outputs.result).PACKAGES_ENUMERATION }}" >> $GITHUB_OUTPUT

