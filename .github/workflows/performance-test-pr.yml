# Этот workflow нельзя запускать параллельно.
# Весь смысл именно запуска в одной сессии, что бы избежать сильного разброса в результатах.
name: Component Performance Testing

on:
  pull_request:
    branches:
      - master
      - dev

concurrency:
  # New commit on branch cancels running workflows of the same branch
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  scope:
    uses: ./.github/workflows/change-detection.yml
    with:
      exclude-dependents: true
    secrets: inherit

  perftest:
    needs: scope
    if: ${{ needs.scope.outputs.HAS_SCOPE == 'true' }}
    runs-on: ubuntu-latest
    env:
      NPM_REGISTRY_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}
      PR_NAME: pr-${{ github.event.number }}
    steps:
      - uses: actions/checkout@v3

      - name: Install s3cmd
        run: pip3 install s3cmd

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Cache node modules
        id: node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ hashFiles('package-lock.json') }}
            node-modules-

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            cache-${{ hashFiles('package-lock.json') }}
            cache-

      - name: Setup packages for PR
        if: ${{ steps.cache.outputs.cache-hit != 'true' && steps.node_modules.outputs.cache-hit != 'true' }}
        run: npm ci --no-progress

      - name: Lerna bootstrap for PR
        run: npx lerna bootstrap --scope=@salutejs/plasma-{core,hope,web,b2c,ui,icons}

      - name: Restore perftool cache
        run: >
          s3cmd
          --access_key ${{ secrets.AWS_ACCESS_KEY_ID }}
          --secret_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          --host ${{ secrets.AWS_ENDPOINT }}
          --host-bucket ${{ secrets.AWS_ENDPOINT }}
          --bucket-location ${{ secrets.AWS_REGION }}
          --signature-v2
          --no-mime-magic
          --no-preserve
          sync
          s3://${{ secrets.AWS_S3_BUCKET_2 }}/perftool-cache/
          ./.perftool/cache/

      - name: Run performance test for PR
        run: >
          npx perftool
          -o perftest/pr-result.json
          --baseBranchRef ${{ github.event.pull_request.base.sha }}
          --currentBranchRef ${{ github.event.pull_request.head.sha }}

      - name: Save perftool cache
        run: >
          s3cmd
          --access_key ${{ secrets.AWS_ACCESS_KEY_ID }}
          --secret_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          --host ${{ secrets.AWS_ENDPOINT }}
          --host-bucket ${{ secrets.AWS_ENDPOINT }}
          --bucket-location ${{ secrets.AWS_REGION }}
          --signature-v2
          --no-mime-magic
          --no-preserve
          sync
          ./.perftool/cache/
          s3://${{ secrets.AWS_S3_BUCKET_2 }}/perftool-cache/

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          clean: false

      - name: Cache node modules
        id: node_modules_base
        uses: actions/cache/restore@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ hashFiles('package-lock.json') }}
            node-modules-

      - name: Cache dependencies
        id: cache_base
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            cache-${{ hashFiles('package-lock.json') }}
            cache-

      - name: Setup packages for ${{ github.event.pull_request.base.ref }}
        if: ${{ steps.cache_base.outputs.cache-hit != 'true' && steps.node_modules_base.outputs.cache-hit != 'true' }}
        run: npm ci --no-progress

      - name: Lerna bootstrap for ${{ github.event.pull_request.base.ref }}
        run: npx lerna bootstrap --scope=@salutejs/plasma-{core,hope,web,b2c,ui,icons}

      - name: Run performance test for ${{ github.event.pull_request.base.ref }}
        run: >
          npx perftool
          -o perftest/base-result.json
          --currentBranchRef ${{ github.event.pull_request.head.sha }}

      - name: Compare test results
        run: >
          npx perftool-compare
          -o perftest/comparison.json
          perftest/pr-result.json
          perftest/base-result.json

      - name: Save comparison result
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Component performance comparison result
          path: /home/runner/work/plasma/plasma/perftest/*.json

      - name: Post result comment
        if: always()
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_TOKEN}}
          script: |
            let report = require('/home/runner/work/plasma/plasma/perftest/comparison.json');
            let result = report.hasSignificantNegativeChanges
                ? '🔴 Fail'
                : '🟢 Success'
            let commentBody = `
            **Component performance testing**

            Result: **${result}**

            Check out report in job artifacts!
            `;

            const resultsByMetric = Object.entries(report.result).reduce((acc, [key, item]) => {
                const metrics = Object.entries(item);

                metrics.forEach(([metricName, metric]) => {
                    if (!metric.mean.change || metric.mean.change.significanceRank !== 'high') {
                        return;
                    }
            
                    if (acc[metricName]) {
                        acc[metricName].push({
                            report: `${key}: ${metric.mean.change.percentage.toFixed(2)}%`,
                            percentage: metric.mean.change.percentage,
                        });
            
                        return;
                    }
            
                    acc[metricName] = [
                        {
                            report: `${key}: ${metric.mean.change.percentage.toFixed(2)}%`,
                            percentage: metric.mean.change.percentage,
                        },
                    ];
                });

                return acc;
            }, {});

            const metrics = Object.values(resultsByMetric);

            metrics.forEach((item) => item.sort((a, b) => Math.abs(b.percentage) - Math.abs(a.percentage)).splice(5));

            const metricsReport = Object.entries(resultsByMetric).reduce((acc, [name, item]) => {
                if (item.length > 0) {
                    acc += `\nTop 5 significant ${name} changes:\n`;
                    acc += item.map((it) => it.report).join('\n');
                }

                return acc;
            }, '');

            commentBody += metricsReport;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });

      - name: Send report
        run: >
          ./scripts/perftool-send-report.js
          --reportPath /home/runner/work/plasma/plasma/perftest/comparison.json
        env:
          GITHUB_SHA: ${{ github.sha }}
