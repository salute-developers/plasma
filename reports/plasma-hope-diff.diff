--- packages/plasma-web/api/plasma-web.api.md
+++ packages/plasma-b2c/api/plasma-b2c.api.md
@@ -1,4 +1,4 @@
-## API Report File for "@salutejs/plasma-web"
+## API Report File for "@salutejs/plasma-b2c"
 
 > Do not edit this file. It is a report generated by [API Extractor](https://api-extractor.com/).
 
@@ -40,13 +40,14 @@
 import { BodyS } from '@salutejs/plasma-typo';
 import { BodyXS } from '@salutejs/plasma-typo';
 import { BodyXXS } from '@salutejs/plasma-typo';
-import { Button } from '@salutejs/plasma-hope';
+import { Breakpoint } from '@salutejs/plasma-hope';
+import { BreakWordProps } from '@salutejs/plasma-core';
 import { Button1 } from '@salutejs/plasma-hope';
 import { Button2 } from '@salutejs/plasma-hope';
-import { ButtonHTMLAttributes } from 'react';
 import { ButtonProps } from '@salutejs/plasma-hope';
-import { ButtonView } from '@salutejs/plasma-hope';
-import { buttonViews } from '@salutejs/plasma-hope';
+import type { ButtonProps as ButtonProps_2 } from '@salutejs/plasma-core';
+import type { ButtonSizeProps } from '@salutejs/plasma-core';
+import type { ButtonViewProps } from '@salutejs/plasma-core';
 import { Calendar } from '@salutejs/plasma-hope';
 import { CalendarBase } from '@salutejs/plasma-hope';
 import { CalendarBaseProps } from '@salutejs/plasma-hope';
@@ -82,11 +83,8 @@
 import { ColOffsetProps } from '@salutejs/plasma-hope';
 import { ColProps } from '@salutejs/plasma-hope';
 import { ColSizeProps } from '@salutejs/plasma-hope';
-import type { ComponentType } from 'react';
-import { Container } from '@salutejs/plasma-hope';
 import { convertRoundnessMatrix } from '@salutejs/plasma-core';
 import { defaultValidate } from '@salutejs/plasma-hope';
-import type { DetailedHTMLProps } from 'react';
 import { DisabledProps } from '@salutejs/plasma-core';
 import { Dropdown } from '@salutejs/plasma-hope';
 import { DropdownItem } from '@salutejs/plasma-hope';
@@ -99,15 +97,18 @@
 import { EditableProps } from '@salutejs/plasma-hope';
 import { ElasticGrid } from '@salutejs/plasma-hope';
 import { ElasticGridProps } from '@salutejs/plasma-hope';
-import { extractTextFrom } from '@salutejs/plasma-core';
-import { FC } from 'react';
-import type { FieldProps as FieldProps_2 } from '@salutejs/plasma-core';
-import { FlattenSimpleInterpolation } from 'styled-components';
+import type { FC } from 'react';
+import type { FieldProps } from '@salutejs/plasma-core';
 import { FocusProps } from '@salutejs/plasma-core';
 import { Footnote1 } from '@salutejs/plasma-hope';
 import { Footnote2 } from '@salutejs/plasma-hope';
 import { formatCurrency } from '@salutejs/plasma-core';
 import { ForwardRefExoticComponent } from 'react';
+import { gridBreakpoints } from '@salutejs/plasma-hope';
+import { gridColumns } from '@salutejs/plasma-hope';
+import { gridGutters } from '@salutejs/plasma-hope';
+import { gridMargins } from '@salutejs/plasma-hope';
+import { gridSizes } from '@salutejs/plasma-hope';
 import { H1 } from '@salutejs/plasma-typo';
 import { H2 } from '@salutejs/plasma-typo';
 import { H3 } from '@salutejs/plasma-typo';
@@ -118,10 +119,11 @@
 import { Headline3 } from '@salutejs/plasma-hope';
 import { Headline4 } from '@salutejs/plasma-hope';
 import { Headline5 } from '@salutejs/plasma-hope';
-import { HTMLAttributes } from 'react';
+import { Image as Image_2 } from '@salutejs/plasma-core';
 import { ImageBaseProps } from '@salutejs/plasma-core';
-import type { ImageProps as ImageProps_2 } from '@salutejs/plasma-core';
+import { ImageProps } from '@salutejs/plasma-core';
 import { InputHTMLAttributes } from '@salutejs/plasma-core';
+import type { InputProps } from '@salutejs/plasma-core';
 import { KeyboardEvent as KeyboardEvent_2 } from 'react';
 import { LineSkeleton } from '@salutejs/plasma-hope';
 import { LineSkeletonProps } from '@salutejs/plasma-hope';
@@ -129,6 +131,8 @@
 import { List } from '@salutejs/plasma-hope';
 import { ListItem } from '@salutejs/plasma-hope';
 import { MaxLinesProps } from '@salutejs/plasma-core';
+import { mediaQuery } from '@salutejs/plasma-hope';
+import { MediaQueryFunction } from '@salutejs/plasma-hope';
 import { Modal } from '@salutejs/plasma-hope';
 import { ModalProps } from '@salutejs/plasma-hope';
 import { ModalsProvider } from '@salutejs/plasma-hope';
@@ -166,8 +170,7 @@
 import { radiuses } from '@salutejs/plasma-core';
 import { Ratio } from '@salutejs/plasma-core';
 import { default as React_2 } from 'react';
-import { ReactElement } from 'react';
-import type { ReactNode } from 'react';
+import { ReactNode } from 'react';
 import { RectSkeleton } from '@salutejs/plasma-hope';
 import { RectSkeletonProps } from '@salutejs/plasma-hope';
 import { RefAttributes } from 'react';
@@ -175,6 +178,8 @@
 import { RoundnessProps } from '@salutejs/plasma-core';
 import { Row } from '@salutejs/plasma-hope';
 import { ScrollSnapProps } from '@salutejs/plasma-core';
+import type { SelectProps } from '@salutejs/plasma-hope';
+import { SelectViewProps } from '@salutejs/plasma-hope';
 import { setRef } from '@salutejs/plasma-core';
 import { shadows } from '@salutejs/plasma-core';
 import { ShiftProps } from '@salutejs/plasma-core';
@@ -185,19 +190,20 @@
 import { SmartPaginationDotsProps } from '@salutejs/plasma-hope';
 import { SnapAlign } from '@salutejs/plasma-core';
 import { SnapType } from '@salutejs/plasma-core';
+import { spacing } from '@salutejs/plasma-core';
 import { SpacingProps } from '@salutejs/plasma-core';
 import { Spinner } from '@salutejs/plasma-hope';
 import { SpinnerProps } from '@salutejs/plasma-hope';
 import { SSRProvider } from '@salutejs/plasma-hope';
+import { StatusType } from '@salutejs/plasma-hope';
 import { StyledCard } from '@salutejs/plasma-hope';
 import { StyledComponent } from 'styled-components';
 import { StyledPreviewGallery } from '@salutejs/plasma-hope';
 import { Subtitle } from '@salutejs/plasma-hope';
 import { Switch } from '@salutejs/plasma-hope';
 import { SwitchProps } from '@salutejs/plasma-hope';
-import type { SyntheticEvent } from 'react';
 import { syntheticFocus } from '@salutejs/plasma-core';
-import type { TabItemProps as TabItemProps_2 } from '@salutejs/plasma-core';
+import { TabItemProps as TabItemProps_2 } from '@salutejs/plasma-core';
 import { TabsControllerProps as TabsControllerProps_2 } from '@salutejs/plasma-core';
 import type { TabsProps as TabsProps_2 } from '@salutejs/plasma-core';
 import { TextareaHTMLAttributes } from '@salutejs/plasma-core';
@@ -311,10 +317,33 @@
 
 export { BodyXXS }
 
-// @public (undocumented)
-export type Breakpoint = keyof typeof gridBreakpoints;
+export { Breakpoint }
+
+export { BreakWordProps }
 
-export { Button }
+// @public
+export const Button: ForwardRefExoticComponent<(ButtonProps_2<HTMLElement> & {
+text?: ReactNode;
+contentLeft?: ReactNode;
+contentRight?: undefined;
+children?: undefined;
+isLoading?: boolean | undefined;
+loader?: ReactNode;
+} & Partial<ButtonSizeProps<string | number>> & Partial<ButtonViewProps<"primary" | "success" | "warning" | "critical" | "secondary" | "checked" | "overlay" | "clear">> & RefAttributes<HTMLButtonElement>) | (ButtonProps_2<HTMLElement> & {
+text?: ReactNode;
+contentLeft?: undefined;
+contentRight?: ReactNode;
+children?: undefined;
+isLoading?: boolean | undefined;
+loader?: ReactNode;
+} & Partial<ButtonSizeProps<string | number>> & Partial<ButtonViewProps<"primary" | "success" | "warning" | "critical" | "secondary" | "checked" | "overlay" | "clear">> & RefAttributes<HTMLButtonElement>) | (ButtonProps_2<HTMLElement> & {
+text?: undefined;
+contentLeft?: undefined;
+contentRight?: undefined;
+children?: ReactNode;
+isLoading?: boolean | undefined;
+loader?: ReactNode;
+} & Partial<ButtonSizeProps<string | number>> & Partial<ButtonViewProps<"primary" | "success" | "warning" | "critical" | "secondary" | "checked" | "overlay" | "clear">> & RefAttributes<HTMLButtonElement>)>;
 
 export { Button1 }
 
@@ -322,10 +351,6 @@
 
 export { ButtonProps }
 
-export { ButtonView }
-
-export { buttonViews }
-
 export { Calendar }
 
 export { CalendarBase }
@@ -384,6 +409,9 @@
 
 export { CheckboxProps }
 
+// @public (undocumented)
+export function clearSelection(): void;
+
 export { closeNotification }
 
 export { Col }
@@ -396,7 +424,8 @@
 
 export { ColSizeProps }
 
-export { Container }
+// @public
+export const Container: StyledComponent<"div", any, {}, never>;
 
 export { convertRoundnessMatrix }
 
@@ -408,57 +437,8 @@
 
 export { DropdownItem }
 
-// @public (undocumented)
-export interface DropdownItemProps extends DropdownNodeType, Omit<DetailedHTMLProps<HTMLAttributes<HTMLLIElement>, HTMLLIElement>, 'onClick' | 'ref'> {
-    color?: string;
-    contentLeft?: ReactNode;
-    // (undocumented)
-    index: number;
-    isActive?: boolean;
-    isHovered?: boolean;
-    // (undocumented)
-    onClick?: (item: DropdownItemType, event: SyntheticEvent) => void;
-    // (undocumented)
-    onFocus?: () => void;
-    // Warning: (ae-forgotten-export) The symbol "OnHover" needs to be exported by the entry point index.d.ts
-    //
-    // (undocumented)
-    onHover?: OnHover;
-}
-
-// @public (undocumented)
-export interface DropdownItemType {
-    // (undocumented)
-    color?: string;
-    // (undocumented)
-    contentLeft?: ReactNode;
-    // (undocumented)
-    label: string;
-    // (undocumented)
-    value: string | number;
-}
-
 export { DropdownList }
 
-// @public (undocumented)
-export interface DropdownNodeType extends DropdownItemType {
-    // (undocumented)
-    isActive?: boolean;
-    // (undocumented)
-    isDisabled?: boolean;
-    // (undocumented)
-    items?: Array<DropdownNodeType>;
-}
-
-// @public
-export const DropdownPopup: StyledComponent<React_2.NamedExoticComponent<PopupProps & React_2.RefAttributes<HTMLDivElement>>, any, DropdownPopupProps, never>;
-
-// @public (undocumented)
-export interface DropdownPopupProps extends PopupProps {
-    // @deprecated
-    offsetTop?: string | number;
-}
-
 export { DropdownProps }
 
 export { DsplL }
@@ -475,8 +455,6 @@
 
 export { ElasticGridProps }
 
-export { extractTextFrom }
-
 export { FocusProps }
 
 export { Footnote1 }
@@ -485,44 +463,15 @@
 
 export { formatCurrency }
 
-// @public (undocumented)
-export const gridBreakpoints: {
-    XXL: number;
-    XL: number;
-    L: number;
-    M: number;
-    S: number;
-};
+export { gridBreakpoints }
 
-// @public (undocumented)
-export const gridColumns: {
-    XXL: number;
-    XL: number;
-    L: number;
-    M: number;
-    S: number;
-};
+export { gridColumns }
 
-// @public (undocumented)
-export const gridGutters: {
-    XXL: number;
-    XL: number;
-    L: number;
-    M: number;
-    S: number;
-};
+export { gridGutters }
 
-// @public (undocumented)
-export const gridMargins: {
-    XXL: number;
-    XL: number;
-    L: number;
-    M: number;
-    S: number;
-};
+export { gridMargins }
 
-// @public (undocumented)
-export const gridSizes: ("XXL" | "XL" | "L" | "M" | "S")[];
+export { gridSizes }
 
 export { H1 }
 
@@ -544,14 +493,11 @@
 
 export { Headline5 }
 
-// @public
-const Image_2: React.FC<ImageProps>;
 export { Image_2 as Image }
 
 export { ImageBaseProps }
 
-// @public (undocumented)
-export type ImageProps = ImageProps_2;
+export { ImageProps }
 
 export { InputHTMLAttributes }
 
@@ -567,11 +513,9 @@
 
 export { MaxLinesProps }
 
-// @public
-export const mediaQuery: (breakpoint: Breakpoint, deviceScale?: number) => MediaQueryFunction;
+export { mediaQuery }
 
-// @public (undocumented)
-export type MediaQueryFunction = (content: FlattenSimpleInterpolation | string) => FlattenSimpleInterpolation;
+export { MediaQueryFunction }
 
 export { Modal }
 
@@ -585,13 +529,6 @@
 
 export { monthShortName }
 
-// @public (undocumented)
-export interface MultiSelectProps extends Omit<SelectViewProps, 'onItemClick' | 'value' | 'label' | 'multiselect'> {
-    onChange?: (value: Array<string | number> | null) => void;
-    separator?: string;
-    value: Array<string | number> | null;
-}
-
 export { Notification_2 as Notification }
 
 export { NotificationProps }
@@ -665,67 +602,27 @@
 export { ScrollSnapProps }
 
 // @public
-export const Select: <T>(props: ({
+export const Select: React_2.ForwardRefExoticComponent<({
     multiselect?: false | undefined;
     separator?: undefined;
 } & {
-    value: T;
-    onChange?: ((value: T) => void) | undefined;
-} & Pick<SelectViewProps, "onClick" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "nonce" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "form" | "name" | "type" | "status" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "items" | "isOpen" | "onItemSelect" | "helperText"> & React_2.RefAttributes<HTMLButtonElement>) | ({
+    value: any;
+    onChange?: ((value: any) => void) | undefined;
+} & Pick<SelectViewProps, "form" | "slot" | "style" | "title" | "type" | "name" | "className" | "color" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "status" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "nonce" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "isOpen" | "items" | "onItemSelect" | "helperText"> & React_2.RefAttributes<HTMLButtonElement>) | ({
     multiselect?: true | undefined;
     separator?: string | undefined;
 } & {
-    value: T;
-    onChange?: ((value: T) => void) | undefined;
-} & Pick<SelectViewProps, "onClick" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "nonce" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "form" | "name" | "type" | "status" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "items" | "isOpen" | "onItemSelect" | "helperText"> & React_2.RefAttributes<HTMLButtonElement>)) => ReactElement;
-
-// @public (undocumented)
-export const SelectButton: React_2.ForwardRefExoticComponent<SelectButtonProps & React_2.RefAttributes<HTMLButtonElement>>;
-
-// Warning: (ae-forgotten-export) The symbol "FieldProps" needs to be exported by the entry point index.d.ts
-//
-// @public (undocumented)
-export interface SelectButtonProps extends Pick<FieldProps, 'status' | 'placeholder' | 'disabled'>, Omit<ButtonHTMLAttributes<SelectRefElement>, 'value'> {
-    // (undocumented)
-    children?: never;
-    // (undocumented)
-    hasItems?: boolean;
-    // (undocumented)
-    isOpen?: boolean;
-    value?: string | number | null;
-}
-
-// Warning: (ae-forgotten-export) The symbol "DropdownUncontrolledProps" needs to be exported by the entry point index.d.ts
-//
-// @public (undocumented)
-export const SelectDropdown: StyledComponent<FC<DropdownUncontrolledProps>, any, {}, never>;
-
-// @public (undocumented)
-export interface SelectDropdownProps extends DropdownUncontrolledProps {
-}
-
-// @public (undocumented)
-export type SelectProps<T = any> = ({
-    multiselect?: false;
-    separator?: never;
-} | {
-    multiselect?: true;
-    separator?: string;
-}) & {
-    value: T;
-    onChange?: (value: T) => void;
-} & Omit<SelectViewProps, 'onItemClick' | 'value' | 'label' | 'multiselect'>;
+    value: any;
+    onChange?: ((value: any) => void) | undefined;
+} & Pick<SelectViewProps, "form" | "slot" | "style" | "title" | "type" | "name" | "className" | "color" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "status" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "nonce" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "isOpen" | "items" | "onItemSelect" | "helperText"> & React_2.RefAttributes<HTMLButtonElement>)>;
 
 // @public (undocumented)
-export type SelectRefElement = HTMLButtonElement;
+export const SelectGroup: StyledComponent<"div", any, {}, never>;
 
-// @public
-export const SelectView: React_2.ForwardRefExoticComponent<SelectViewProps & React_2.RefAttributes<HTMLButtonElement>>;
+export { SelectProps }
 
 // @public (undocumented)
-export interface SelectViewProps extends Pick<FieldProps, 'status' | 'placeholder' | 'helperText' | 'disabled'>, Pick<SelectDropdownProps, 'items' | 'onItemSelect'>, Omit<SelectButtonProps, 'hasItems' | 'isExpanded' | 'onChange'> {
-    multiselect?: boolean;
-}
+export function selectText(node: Node): void;
 
 export { setRef }
 
@@ -733,12 +630,6 @@
 
 export { ShiftProps }
 
-// @public (undocumented)
-export interface SingleSelectProps extends Omit<SelectViewProps, 'onItemClick' | 'value' | 'label' | 'multiselect'> {
-    onChange?: (value: string | number | null) => void;
-    value: string | number | null;
-}
-
 export { sizes }
 
 export { SkeletonGradientProps }
@@ -756,6 +647,8 @@
 
 export { SnapType }
 
+export { spacing }
+
 export { SpacingProps }
 
 export { Spinner }
@@ -764,6 +657,8 @@
 
 export { SSRProvider }
 
+export { StatusType }
+
 export { StyledCard }
 
 export { StyledPreviewGallery }
@@ -777,10 +672,12 @@
 export { syntheticFocus }
 
 // @public
-export const TabItem: StyledComponent<ForwardRefExoticComponent<TabItemProps_2 & RefAttributes<HTMLButtonElement>>, any, {}, never>;
+export const TabItem: StyledComponent<ForwardRefExoticComponent<TabItemProps_2 & RefAttributes<HTMLButtonElement>>, any, TabItemProps, never>;
 
 // @public (undocumented)
-export interface TabItemProps extends TabItemProps_2 {
+export interface TabItemProps extends AsProps, TabItemProps_2 {
+    // (undocumented)
+    animated?: boolean;
 }
 
 // @public
@@ -795,6 +692,13 @@
 
 // @public (undocumented)
 export interface TabsProps extends TabsProps_2 {
+    outsideScroll?: boolean | {
+        left?: string;
+        right?: string;
+    };
+    pilled?: boolean;
+    size?: 'l' | 's';
+    view?: 'secondary' | 'clear';
 }
 
 // @public
@@ -803,13 +707,11 @@
 export { TextareaHTMLAttributes }
 
 // @public (undocumented)
-export interface TextAreaProps extends TextAreaProps_2 {
-    // @deprecated (undocumented)
-    helperBlock?: React_2.ReactElement;
-    // @deprecated (undocumented)
-    helperText?: string;
+export interface TextAreaProps extends Omit<TextAreaProps_2, 'size'> {
     leftHelper?: string;
+    // (undocumented)
     rightHelper?: string;
+    size?: 'l' | 'm' | 's' | 'xs';
 }
 
 export { TextareaResize }
@@ -817,11 +719,13 @@
 // @public
 export const TextField: React_2.ForwardRefExoticComponent<TextFieldProps & React_2.RefAttributes<HTMLInputElement>>;
 
-// Warning: (ae-forgotten-export) The symbol "InputProps" needs to be exported by the entry point index.d.ts
-//
 // @public (undocumented)
-export interface TextFieldProps extends Pick<FieldProps, 'contentLeft' | 'contentRight' | 'helperText'>, Omit<InputProps, 'hasContentLeft' | 'hasContentRight'> {
+export interface TextFieldProps extends Omit<FieldProps, 'size'>, InputProps {
+    caption?: string;
     onSearch?: (value: string, event?: KeyboardEvent_2<HTMLInputElement>) => void;
+    size?: 'l' | 'm' | 's' | 'xs';
+    // Warning: (ae-forgotten-export) The symbol "TextFieldView" needs to be exported by the entry point index.d.ts
+    view?: TextFieldView;
 }
 
 export { TextL }
@@ -860,6 +764,13 @@
 
 export { Upload }
 
+// @public
+export const UploadAudio: FC<UploadAudioProps>;
+
+// @public (undocumented)
+export interface UploadAudioProps extends UploadProps {
+}
+
 export { UploadProgress }
 
 export { UploadProgressProps }
@@ -886,21 +797,10 @@
 
 export { views }
 
-// Warning: (ae-forgotten-export) The symbol "WithAssistiveDropdownProps" needs to be exported by the entry point index.d.ts
-//
-// @public
-export const withAssistiveDropdown: <P extends object>(Component: React_2.ComponentClass<P, any> | React_2.FunctionComponent<P> | React_2.ForwardRefExoticComponent<P>, Dropdown?: ComponentType<DropdownUncontrolledProps>) => React_2.FC<P & WithAssistiveDropdownProps>;
-
 export { withAutoFocus }
 
 export { WithAutoFocusProps }
 
-// @public
-export const withMultiSelect: (View: ComponentType<SelectViewProps & RefAttributes<SelectRefElement>>) => React_2.ForwardRefExoticComponent<MultiSelectProps & React_2.RefAttributes<HTMLButtonElement>>;
-
-// @public
-export const withSingleSelect: (View: ComponentType<SelectViewProps & RefAttributes<SelectRefElement>>) => React_2.ForwardRefExoticComponent<SingleSelectProps & React_2.RefAttributes<HTMLButtonElement>>;
-
 export { withSkeleton }
 
 export { WithSkeletonProps }
