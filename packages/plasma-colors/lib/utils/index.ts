import fs from 'fs';
import path from 'path';

// TODO: https://github.com/salute-developers/plasma/issues/1181

export const ROBO_COMMENT = '// Generated by robots, do not change this manually!\n';

export const generateFile = (name: string, content: string | object, deprecated = '') => {
    if (typeof content !== 'string') {
        content = JSON.stringify(content, null, 4);
    }

    return {
        file: `${name}.ts`,
        content: `export const ${name} = ${content};${deprecated}\n`,
    };
};

export type GeneratedFiles = Array<{
    file: string;
    content: string;
}>;

export const writeGeneratedToFS = (dir: string, generated: GeneratedFiles, generateMessage = ROBO_COMMENT) => {
    fs.existsSync(dir) || fs.mkdirSync(dir);

    for (const { file, content } of generated) {
        const src = path.join(dir, file);

        if (fs.existsSync(src)) {
            fs.appendFileSync(src, content);
            return;
        }

        fs.writeFileSync(src, `${generateMessage}\n${content}`);
    }
};

export const getDirectoryContent = (dir: string) =>
    fs
        .readdirSync(dir, { withFileTypes: true })
        .filter((item) => item.isFile() && path.extname(path.join(dir, item.name)) === '.json')
        .reduce((colorSchemas, item) => {
            const fileContent = fs.readFileSync(path.join(dir, item.name), 'utf-8');
            const name = path.parse(item.name).name;

            return {
                ...colorSchemas,
                [name]: fileContent,
            };
        }, {});
