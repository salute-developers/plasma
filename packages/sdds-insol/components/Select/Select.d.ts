import type { SelectProps as SelectPropsNewHope } from '@salutejs/plasma-new-hope/styled-components';
import React from 'react';
declare const Select: React.ForwardRefExoticComponent<Omit<SelectPropsNewHope, "view" | "size" | "chipView"> & Pick<import("@salutejs/plasma-new-hope/types/engines/types").PropsType<{
    size: {
        xs: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        s: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        m: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        l: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
    };
    view: {
        default: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        positive: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        warning: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        negative: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        accent: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        secondary: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        clear: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        dark: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        black: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        white: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
    };
    chipView: {
        default: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        secondary: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
        accent: import("@salutejs/plasma-new-hope/types/engines/types").PolymorphicClassName;
    };
}> & (({
    target?: "textfield-like" | undefined;
    view?: "default" | "positive" | "warning" | "negative" | undefined;
    contentLeft?: React.ReactNode;
    labelPlacement?: "outer" | "inner" | undefined;
    placeholder?: string | undefined;
    helperText?: string | undefined;
} & {
    multiselect?: false | undefined;
    separator?: undefined;
} & {
    value: any;
    onChange?: ((value: any) => void) | undefined;
    listOverflow?: import("csstype").Property.Overflow | undefined;
    listHeight?: import("csstype").Property.Height<string | number> | undefined;
    status?: "warning" | "success" | "error" | undefined;
    placeholder?: string | undefined;
    helperText?: string | undefined;
    disabled?: boolean | undefined;
    items?: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode[] | undefined;
    onItemSelect?: ((e: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode, event: React.SyntheticEvent<Element, Event>) => void) | undefined;
    hasItems?: boolean | undefined;
    children?: undefined;
    isOpen?: boolean | undefined;
    isTargetAmount?: boolean | undefined;
    renderTarget?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode | import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode[]) => React.ReactNode) | undefined;
    placement?: ("auto" | ("top" | "bottom" | "right" | "left")) | ("top" | "bottom" | "right" | "left")[] | undefined;
    label?: string | undefined;
    onScrollBottom?: ((e: React.UIEvent<HTMLUListElement, UIEvent>) => void) | undefined;
    variant?: "normal" | "tight" | undefined;
    listWidth?: import("csstype").Property.Width<string | number> | undefined;
    portal?: string | React.RefObject<HTMLElement> | undefined;
    renderValue?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode) => string) | undefined;
    renderItem?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode) => React.ReactNode) | undefined;
    closeAfterSelect?: boolean | undefined;
    size?: string | undefined;
    view?: string | undefined;
    chipView?: string | undefined;
} & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "onChange" | "nonce" | "onResize" | "onResizeCapture" | "value"> & React.RefAttributes<HTMLButtonElement>) | ({
    target?: "textfield-like" | undefined;
    view?: "default" | "positive" | "warning" | "negative" | undefined;
    contentLeft?: React.ReactNode;
    labelPlacement?: "outer" | "inner" | undefined;
    placeholder?: string | undefined;
    helperText?: string | undefined;
} & {
    multiselect?: true | undefined;
    separator?: string | undefined;
} & {
    value: any;
    onChange?: ((value: any) => void) | undefined;
    listOverflow?: import("csstype").Property.Overflow | undefined;
    listHeight?: import("csstype").Property.Height<string | number> | undefined;
    status?: "warning" | "success" | "error" | undefined;
    placeholder?: string | undefined;
    helperText?: string | undefined;
    disabled?: boolean | undefined;
    items?: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode[] | undefined;
    onItemSelect?: ((e: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode, event: React.SyntheticEvent<Element, Event>) => void) | undefined;
    hasItems?: boolean | undefined;
    children?: undefined;
    isOpen?: boolean | undefined;
    isTargetAmount?: boolean | undefined;
    renderTarget?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode | import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode[]) => React.ReactNode) | undefined;
    placement?: ("auto" | ("top" | "bottom" | "right" | "left")) | ("top" | "bottom" | "right" | "left")[] | undefined;
    label?: string | undefined;
    onScrollBottom?: ((e: React.UIEvent<HTMLUListElement, UIEvent>) => void) | undefined;
    variant?: "normal" | "tight" | undefined;
    listWidth?: import("csstype").Property.Width<string | number> | undefined;
    portal?: string | React.RefObject<HTMLElement> | undefined;
    renderValue?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode) => string) | undefined;
    renderItem?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode) => React.ReactNode) | undefined;
    closeAfterSelect?: boolean | undefined;
    size?: string | undefined;
    view?: string | undefined;
    chipView?: string | undefined;
} & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "onChange" | "nonce" | "onResize" | "onResizeCapture" | "value"> & React.RefAttributes<HTMLButtonElement>) | ({
    target?: "button-like" | undefined;
    view?: "default" | "accent" | "secondary" | "positive" | "warning" | "negative" | "clear" | "dark" | "black" | "white" | undefined;
    contentLeft?: undefined;
    labelPlacement?: undefined;
    placeholder?: undefined;
    helperText?: undefined;
} & {
    multiselect?: false | undefined;
    separator?: undefined;
} & {
    value: any;
    onChange?: ((value: any) => void) | undefined;
    listOverflow?: import("csstype").Property.Overflow | undefined;
    listHeight?: import("csstype").Property.Height<string | number> | undefined;
    status?: "warning" | "success" | "error" | undefined;
    placeholder?: string | undefined;
    helperText?: string | undefined;
    disabled?: boolean | undefined;
    items?: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode[] | undefined;
    onItemSelect?: ((e: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode, event: React.SyntheticEvent<Element, Event>) => void) | undefined;
    hasItems?: boolean | undefined;
    children?: undefined;
    isOpen?: boolean | undefined;
    isTargetAmount?: boolean | undefined;
    renderTarget?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode | import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode[]) => React.ReactNode) | undefined;
    placement?: ("auto" | ("top" | "bottom" | "right" | "left")) | ("top" | "bottom" | "right" | "left")[] | undefined;
    label?: string | undefined;
    onScrollBottom?: ((e: React.UIEvent<HTMLUListElement, UIEvent>) => void) | undefined;
    variant?: "normal" | "tight" | undefined;
    listWidth?: import("csstype").Property.Width<string | number> | undefined;
    portal?: string | React.RefObject<HTMLElement> | undefined;
    renderValue?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode) => string) | undefined;
    renderItem?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode) => React.ReactNode) | undefined;
    closeAfterSelect?: boolean | undefined;
    size?: string | undefined;
    view?: string | undefined;
    chipView?: string | undefined;
} & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "onChange" | "nonce" | "onResize" | "onResizeCapture" | "value"> & React.RefAttributes<HTMLButtonElement>) | ({
    target?: "button-like" | undefined;
    view?: "default" | "accent" | "secondary" | "positive" | "warning" | "negative" | "clear" | "dark" | "black" | "white" | undefined;
    contentLeft?: undefined;
    labelPlacement?: undefined;
    placeholder?: undefined;
    helperText?: undefined;
} & {
    multiselect?: true | undefined;
    separator?: string | undefined;
} & {
    value: any;
    onChange?: ((value: any) => void) | undefined;
    listOverflow?: import("csstype").Property.Overflow | undefined;
    listHeight?: import("csstype").Property.Height<string | number> | undefined;
    status?: "warning" | "success" | "error" | undefined;
    placeholder?: string | undefined;
    helperText?: string | undefined;
    disabled?: boolean | undefined;
    items?: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode[] | undefined;
    onItemSelect?: ((e: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode, event: React.SyntheticEvent<Element, Event>) => void) | undefined;
    hasItems?: boolean | undefined;
    children?: undefined;
    isOpen?: boolean | undefined;
    isTargetAmount?: boolean | undefined;
    renderTarget?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode | import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode[]) => React.ReactNode) | undefined;
    placement?: ("auto" | ("top" | "bottom" | "right" | "left")) | ("top" | "bottom" | "right" | "left")[] | undefined;
    label?: string | undefined;
    onScrollBottom?: ((e: React.UIEvent<HTMLUListElement, UIEvent>) => void) | undefined;
    variant?: "normal" | "tight" | undefined;
    listWidth?: import("csstype").Property.Width<string | number> | undefined;
    portal?: string | React.RefObject<HTMLElement> | undefined;
    renderValue?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode) => string) | undefined;
    renderItem?: ((item: import("@salutejs/plasma-new-hope/types/components/Select/ui/Inner/ui/Item/Item.types").MergedDropdownNode) => React.ReactNode) | undefined;
    closeAfterSelect?: boolean | undefined;
    size?: string | undefined;
    view?: string | undefined;
    chipView?: string | undefined;
} & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "onChange" | "nonce" | "onResize" | "onResizeCapture" | "value"> & React.RefAttributes<HTMLButtonElement>)), "view" | "size" | "chipView"> & React.RefAttributes<HTMLButtonElement>>;
export { Select };
